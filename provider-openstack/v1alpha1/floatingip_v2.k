"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema FloatingipV2:
    r"""
    FloatingipV2 is the Schema for the FloatingipV2s API. Manages a V2 floating IP resource within OpenStack Neutron (networking).

    Attributes
    ----------
    apiVersion : str, default is "networking.openstack.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "FloatingipV2", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2Spec, default is Undefined, required
        spec
    status : NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2Status, default is Undefined, optional
        status
    """


    apiVersion: "networking.openstack.crossplane.io/v1alpha1" = "networking.openstack.crossplane.io/v1alpha1"

    kind: "FloatingipV2" = "FloatingipV2"

    metadata?: v1.ObjectMeta

    spec: NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2Spec

    status?: NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2Status


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2Spec:
    r"""
    FloatingipV2Spec defines the desired state of FloatingipV2

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecForProvider, default is Undefined, required
        for provider
    initProvider : NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecForProvider

    initProvider?: NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecProviderConfigRef

    publishConnectionDetailsTo?: NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecWriteConnectionSecretToRef


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecForProvider:
    r"""
    networking openstack crossplane io v1alpha1 floatingip v2 spec for provider

    Attributes
    ----------
    address : str, default is Undefined, optional
        The actual/specific floating IP to obtain. By default,
        non-admin users are not able to specify a floating IP, so you must either be
        an admin user or have had a custom policy or role applied to your OpenStack
        user or project.
    description : str, default is Undefined, optional
        Human-readable description for the floating IP.
    dnsDomain : str, default is Undefined, optional
        The floating IP DNS domain. Available, when Neutron
        DNS extension is enabled. The data in this attribute will be published in an
        external DNS service when Neutron is configured to integrate with such a
        service. Changing this creates a new floating IP.
    dnsName : str, default is Undefined, optional
        The floating IP DNS name. Available, when Neutron DNS
        extension is enabled. The data in this attribute will be published in an
        external DNS service when Neutron is configured to integrate with such a
        service. Changing this creates a new floating IP.
    fixedIp : str, default is Undefined, optional
        Fixed IP of the port to associate with this floating IP. Required if
        the port has multiple fixed IPs.
    pool : str, default is Undefined, optional
        The name of the pool from which to obtain the floating
        IP. Changing this creates a new floating IP.
    portId : str, default is Undefined, optional
        ID of an existing port with at least one IP address to
        associate with this floating IP.
    region : str, default is Undefined, optional
        The region in which to obtain the V2 Networking client.
        A Networking client is needed to create a floating IP that can be used with
        another networking resource, such as a load balancer. If omitted, the
        region argument of the provider is used. Changing this creates a new
        floating IP (which may or may not have a different address).
    subnetId : str, default is Undefined, optional
        The subnet ID of the floating IP pool. Specify this if
        the floating IP network has multiple subnets.
    subnetIds : [str], default is Undefined, optional
        A list of external subnet IDs to try over each to
        allocate a floating IP address. If a subnet ID in a list has exhausted
        floating IP pool, the next subnet ID will be tried. This argument is used only
        during the resource creation. Conflicts with a subnet_id argument.
    tags : [str], default is Undefined, optional
        A set of string tags for the floating IP.
    tenantId : str, default is Undefined, optional
        The target tenant ID in which to allocate the floating
        IP, if you specify this together with a port_id, make sure the target port
        belongs to the same tenant. Changing this creates a new floating IP (which
        may or may not have a different address)
    valueSpecs : {str:str}, default is Undefined, optional
        Map of additional options.
    """


    address?: str

    description?: str

    dnsDomain?: str

    dnsName?: str

    fixedIp?: str

    pool?: str

    portId?: str

    region?: str

    subnetId?: str

    subnetIds?: [str]

    tags?: [str]

    tenantId?: str

    valueSpecs?: {str:str}


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    address : str, default is Undefined, optional
        The actual/specific floating IP to obtain. By default,
        non-admin users are not able to specify a floating IP, so you must either be
        an admin user or have had a custom policy or role applied to your OpenStack
        user or project.
    description : str, default is Undefined, optional
        Human-readable description for the floating IP.
    dnsDomain : str, default is Undefined, optional
        The floating IP DNS domain. Available, when Neutron
        DNS extension is enabled. The data in this attribute will be published in an
        external DNS service when Neutron is configured to integrate with such a
        service. Changing this creates a new floating IP.
    dnsName : str, default is Undefined, optional
        The floating IP DNS name. Available, when Neutron DNS
        extension is enabled. The data in this attribute will be published in an
        external DNS service when Neutron is configured to integrate with such a
        service. Changing this creates a new floating IP.
    fixedIp : str, default is Undefined, optional
        Fixed IP of the port to associate with this floating IP. Required if
        the port has multiple fixed IPs.
    pool : str, default is Undefined, optional
        The name of the pool from which to obtain the floating
        IP. Changing this creates a new floating IP.
    portId : str, default is Undefined, optional
        ID of an existing port with at least one IP address to
        associate with this floating IP.
    region : str, default is Undefined, optional
        The region in which to obtain the V2 Networking client.
        A Networking client is needed to create a floating IP that can be used with
        another networking resource, such as a load balancer. If omitted, the
        region argument of the provider is used. Changing this creates a new
        floating IP (which may or may not have a different address).
    subnetId : str, default is Undefined, optional
        The subnet ID of the floating IP pool. Specify this if
        the floating IP network has multiple subnets.
    subnetIds : [str], default is Undefined, optional
        A list of external subnet IDs to try over each to
        allocate a floating IP address. If a subnet ID in a list has exhausted
        floating IP pool, the next subnet ID will be tried. This argument is used only
        during the resource creation. Conflicts with a subnet_id argument.
    tags : [str], default is Undefined, optional
        A set of string tags for the floating IP.
    tenantId : str, default is Undefined, optional
        The target tenant ID in which to allocate the floating
        IP, if you specify this together with a port_id, make sure the target port
        belongs to the same tenant. Changing this creates a new floating IP (which
        may or may not have a different address)
    valueSpecs : {str:str}, default is Undefined, optional
        Map of additional options.
    """


    address?: str

    description?: str

    dnsDomain?: str

    dnsName?: str

    fixedIp?: str

    pool?: str

    portId?: str

    region?: str

    subnetId?: str

    subnetIds?: [str]

    tags?: [str]

    tenantId?: str

    valueSpecs?: {str:str}


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecProviderConfigRefPolicy


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecPublishConnectionDetailsToConfigRef

    metadata?: NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecPublishConnectionDetailsToMetadata

    name: str


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecPublishConnectionDetailsToConfigRefPolicy


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2SpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2Status:
    r"""
    FloatingipV2Status defines the observed state of FloatingipV2.

    Attributes
    ----------
    atProvider : NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2StatusAtProvider, default is Undefined, optional
        at provider
    conditions : [NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2StatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2StatusAtProvider

    conditions?: [NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2StatusConditionsItems0]

    observedGeneration?: int


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2StatusAtProvider:
    r"""
    networking openstack crossplane io v1alpha1 floatingip v2 status at provider

    Attributes
    ----------
    address : str, default is Undefined, optional
        The actual/specific floating IP to obtain. By default,
        non-admin users are not able to specify a floating IP, so you must either be
        an admin user or have had a custom policy or role applied to your OpenStack
        user or project.
    allTags : [str], default is Undefined, optional
        The collection of tags assigned on the floating IP, which have
        been explicitly and implicitly added.
    description : str, default is Undefined, optional
        Human-readable description for the floating IP.
    dnsDomain : str, default is Undefined, optional
        The floating IP DNS domain. Available, when Neutron
        DNS extension is enabled. The data in this attribute will be published in an
        external DNS service when Neutron is configured to integrate with such a
        service. Changing this creates a new floating IP.
    dnsName : str, default is Undefined, optional
        The floating IP DNS name. Available, when Neutron DNS
        extension is enabled. The data in this attribute will be published in an
        external DNS service when Neutron is configured to integrate with such a
        service. Changing this creates a new floating IP.
    fixedIp : str, default is Undefined, optional
        Fixed IP of the port to associate with this floating IP. Required if
        the port has multiple fixed IPs.
    id : str, default is Undefined, optional
        id
    pool : str, default is Undefined, optional
        The name of the pool from which to obtain the floating
        IP. Changing this creates a new floating IP.
    portId : str, default is Undefined, optional
        ID of an existing port with at least one IP address to
        associate with this floating IP.
    region : str, default is Undefined, optional
        The region in which to obtain the V2 Networking client.
        A Networking client is needed to create a floating IP that can be used with
        another networking resource, such as a load balancer. If omitted, the
        region argument of the provider is used. Changing this creates a new
        floating IP (which may or may not have a different address).
    subnetId : str, default is Undefined, optional
        The subnet ID of the floating IP pool. Specify this if
        the floating IP network has multiple subnets.
    subnetIds : [str], default is Undefined, optional
        A list of external subnet IDs to try over each to
        allocate a floating IP address. If a subnet ID in a list has exhausted
        floating IP pool, the next subnet ID will be tried. This argument is used only
        during the resource creation. Conflicts with a subnet_id argument.
    tags : [str], default is Undefined, optional
        A set of string tags for the floating IP.
    tenantId : str, default is Undefined, optional
        The target tenant ID in which to allocate the floating
        IP, if you specify this together with a port_id, make sure the target port
        belongs to the same tenant. Changing this creates a new floating IP (which
        may or may not have a different address)
    valueSpecs : {str:str}, default is Undefined, optional
        Map of additional options.
    """


    address?: str

    allTags?: [str]

    description?: str

    dnsDomain?: str

    dnsName?: str

    fixedIp?: str

    id?: str

    pool?: str

    portId?: str

    region?: str

    subnetId?: str

    subnetIds?: [str]

    tags?: [str]

    tenantId?: str

    valueSpecs?: {str:str}


schema NetworkingOpenstackCrossplaneIoV1alpha1FloatingipV2StatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


