"""
This file was generated by the KCL auto-gen tool. DO NOT EDIT.
Editing this file might prove futile when you re-run the KCL auto-gen generate command.
"""
import k8s.apimachinery.pkg.apis.meta.v1


schema ContainerV1:
    r"""
    ContainerV1 is the Schema for the ContainerV1s API. Manages a V1 container resource within OpenStack.

    Attributes
    ----------
    apiVersion : str, default is "objectstorage.openstack.crossplane.io/v1alpha1", required
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
    kind : str, default is "ContainerV1", required
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
    metadata : v1.ObjectMeta, default is Undefined, optional
        metadata
    spec : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1Spec, default is Undefined, required
        spec
    status : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1Status, default is Undefined, optional
        status
    """


    apiVersion: "objectstorage.openstack.crossplane.io/v1alpha1" = "objectstorage.openstack.crossplane.io/v1alpha1"

    kind: "ContainerV1" = "ContainerV1"

    metadata?: v1.ObjectMeta

    spec: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1Spec

    status?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1Status


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1Spec:
    r"""
    ContainerV1Spec defines the desired state of ContainerV1

    Attributes
    ----------
    deletionPolicy : str, default is "Delete", optional
        DeletionPolicy specifies what will happen to the underlying external
        when this managed resource is deleted - either "Delete" or "Orphan" the
        external resource.
        This field is planned to be deprecated in favor of the ManagementPolicies
        field in a future release. Currently, both could be set independently and
        non-default values would be honored if the feature flag is enabled.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    forProvider : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecForProvider, default is Undefined, required
        for provider
    initProvider : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecInitProvider, default is Undefined, optional
        init provider
    managementPolicies : [str], default is ["*"], optional
        THIS IS A BETA FIELD. It is on by default but can be opted out
        through a Crossplane feature flag.
        ManagementPolicies specify the array of actions Crossplane is allowed to
        take on the managed and external resources.
        This field is planned to replace the DeletionPolicy field in a future
        release. Currently, both could be set independently and non-default
        values would be honored if the feature flag is enabled. If both are
        custom, the DeletionPolicy field will be ignored.
        See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
        and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    providerConfigRef : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecProviderConfigRef, default is Undefined, optional
        provider config ref
    publishConnectionDetailsTo : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecPublishConnectionDetailsTo, default is Undefined, optional
        publish connection details to
    writeConnectionSecretToRef : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecWriteConnectionSecretToRef, default is Undefined, optional
        write connection secret to ref
    """


    deletionPolicy?: "Orphan" | "Delete" = "Delete"

    forProvider: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecForProvider

    initProvider?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecInitProvider

    managementPolicies?: [str] = ["*"]

    providerConfigRef?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecProviderConfigRef

    publishConnectionDetailsTo?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecPublishConnectionDetailsTo

    writeConnectionSecretToRef?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecWriteConnectionSecretToRef


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecForProvider:
    r"""
    objectstorage openstack crossplane io v1alpha1 container v1 spec for provider

    Attributes
    ----------
    containerRead : str, default is Undefined, optional
        Sets an access control list (ACL) that grants
        read access. This header can contain a comma-delimited list of users that can
        read the container (allows the GET method for all objects in the container).
        Changing this updates the access control list read access.
    containerSyncKey : str, default is Undefined, optional
        The secret key for container
        synchronization. Changing this updates container synchronization.
    containerSyncTo : str, default is Undefined, optional
        The destination for container
        synchronization. Changing this updates container synchronization.
    containerWrite : str, default is Undefined, optional
        Sets an ACL that grants write access. Changing
        this updates the access control list write access.
    contentType : str, default is Undefined, optional
        The MIME type for the container. Changing this
        updates the MIME type.
    forceDestroy : bool, default is Undefined, optional
        A boolean that indicates all
        objects should be deleted from the container so that the container can be
        destroyed without error. These objects are not recoverable.
    metadata : {str:str}, default is Undefined, optional
        Custom key/value pairs to associate with the
        container. Changing this updates the existing container metadata.
    name : str, default is Undefined, optional
        A unique name for the container. Changing this creates a
        new container.
    region : str, default is Undefined, optional
        The region in which to create the container. If
        omitted, the region argument of the provider is used. Changing this creates
        a new container.
    storageClass : str, default is Undefined, optional
        The storage class to be used for the container.
        Changing this creates a new container. This option is only available in Ceph
        RGW Swift API implementation.
    storagePolicy : str, default is Undefined, optional
        The storage policy to be used for the
        container. Changing this creates a new container.
    versioning : bool, default is Undefined, optional
        A boolean that can enable or disable object
        versioning. The default value is false. To use this feature, your Swift
        version must be 2.24 or higher (as described in the OpenStack Swift Ussuri
        release
        notes),
        and a cloud administrator must have set the allow_object_versioning = true
        configuration option in Swift. If you cannot set this versioning type, you
        may want to consider using versioning_legacy instead.
    versioningLegacy : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecForProviderVersioningLegacy, default is Undefined, optional
        versioning legacy
    """


    containerRead?: str

    containerSyncKey?: str

    containerSyncTo?: str

    containerWrite?: str

    contentType?: str

    forceDestroy?: bool

    metadata?: {str:str}

    name?: str

    region?: str

    storageClass?: str

    storagePolicy?: str

    versioning?: bool

    versioningLegacy?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecForProviderVersioningLegacy


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecForProviderVersioningLegacy:
    r"""
    (Deprecated) Enable legacy object versioning. The
    structure is described below.

    Attributes
    ----------
    location : str, default is Undefined, optional
        Container in which versions will be stored.
    $type : str, default is Undefined, optional
        Versioning type which can be versions or history
        according to OpenStack
        documentation.
    """


    location?: str

    $type?: str


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecInitProvider:
    r"""
    THIS IS A BETA FIELD. It will be honored
    unless the Management Policies feature flag is disabled.
    InitProvider holds the same fields as ForProvider, with the exception
    of Identifier and other resource reference fields. The fields that are
    in InitProvider are merged into ForProvider when the resource is created.
    The same fields are also added to the terraform ignore_changes hook, to
    avoid updating them after creation. This is useful for fields that are
    required on creation, but we do not desire to update them after creation,
    for example because of an external controller is managing them, like an
    autoscaler.

    Attributes
    ----------
    containerRead : str, default is Undefined, optional
        Sets an access control list (ACL) that grants
        read access. This header can contain a comma-delimited list of users that can
        read the container (allows the GET method for all objects in the container).
        Changing this updates the access control list read access.
    containerSyncKey : str, default is Undefined, optional
        The secret key for container
        synchronization. Changing this updates container synchronization.
    containerSyncTo : str, default is Undefined, optional
        The destination for container
        synchronization. Changing this updates container synchronization.
    containerWrite : str, default is Undefined, optional
        Sets an ACL that grants write access. Changing
        this updates the access control list write access.
    contentType : str, default is Undefined, optional
        The MIME type for the container. Changing this
        updates the MIME type.
    forceDestroy : bool, default is Undefined, optional
        A boolean that indicates all
        objects should be deleted from the container so that the container can be
        destroyed without error. These objects are not recoverable.
    metadata : {str:str}, default is Undefined, optional
        Custom key/value pairs to associate with the
        container. Changing this updates the existing container metadata.
    name : str, default is Undefined, optional
        A unique name for the container. Changing this creates a
        new container.
    region : str, default is Undefined, optional
        The region in which to create the container. If
        omitted, the region argument of the provider is used. Changing this creates
        a new container.
    storageClass : str, default is Undefined, optional
        The storage class to be used for the container.
        Changing this creates a new container. This option is only available in Ceph
        RGW Swift API implementation.
    storagePolicy : str, default is Undefined, optional
        The storage policy to be used for the
        container. Changing this creates a new container.
    versioning : bool, default is Undefined, optional
        A boolean that can enable or disable object
        versioning. The default value is false. To use this feature, your Swift
        version must be 2.24 or higher (as described in the OpenStack Swift Ussuri
        release
        notes),
        and a cloud administrator must have set the allow_object_versioning = true
        configuration option in Swift. If you cannot set this versioning type, you
        may want to consider using versioning_legacy instead.
    versioningLegacy : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecInitProviderVersioningLegacy, default is Undefined, optional
        versioning legacy
    """


    containerRead?: str

    containerSyncKey?: str

    containerSyncTo?: str

    containerWrite?: str

    contentType?: str

    forceDestroy?: bool

    metadata?: {str:str}

    name?: str

    region?: str

    storageClass?: str

    storagePolicy?: str

    versioning?: bool

    versioningLegacy?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecInitProviderVersioningLegacy


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecInitProviderVersioningLegacy:
    r"""
    (Deprecated) Enable legacy object versioning. The
    structure is described below.

    Attributes
    ----------
    location : str, default is Undefined, optional
        Container in which versions will be stored.
    $type : str, default is Undefined, optional
        Versioning type which can be versions or history
        according to OpenStack
        documentation.
    """


    location?: str

    $type?: str


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecProviderConfigRef:
    r"""
    ProviderConfigReference specifies how the provider that will be used to
    create, observe, update, and delete this managed resource should be
    configured.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecProviderConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecProviderConfigRefPolicy


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecProviderConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecPublishConnectionDetailsTo:
    r"""
    PublishConnectionDetailsTo specifies the connection secret config which
    contains a name, metadata and a reference to secret store config to
    which any connection details for this managed resource should be written.
    Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.

    Attributes
    ----------
    configRef : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecPublishConnectionDetailsToConfigRef, default is Undefined, optional
        config ref
    metadata : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecPublishConnectionDetailsToMetadata, default is Undefined, optional
        metadata
    name : str, default is Undefined, required
        Name is the name of the connection secret.
    """


    configRef?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecPublishConnectionDetailsToConfigRef

    metadata?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecPublishConnectionDetailsToMetadata

    name: str


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecPublishConnectionDetailsToConfigRef:
    r"""
    SecretStoreConfigRef specifies which secret store config should be used
    for this ConnectionSecret.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the referenced object.
    policy : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecPublishConnectionDetailsToConfigRefPolicy, default is Undefined, optional
        policy
    """


    name: str

    policy?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecPublishConnectionDetailsToConfigRefPolicy


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecPublishConnectionDetailsToConfigRefPolicy:
    r"""
    Policies for referencing.

    Attributes
    ----------
    resolution : str, default is "Required", optional
        Resolution specifies whether resolution of this reference is required.
        The default is 'Required', which means the reconcile will fail if the
        reference cannot be resolved. 'Optional' means this reference will be
        a no-op if it cannot be resolved.
    resolve : str, default is Undefined, optional
        Resolve specifies when this reference should be resolved. The default
        is 'IfNotPresent', which will attempt to resolve the reference only when
        the corresponding field is not present. Use 'Always' to resolve the
        reference on every reconcile.
    """


    resolution?: "Required" | "Optional" = "Required"

    resolve?: "Always" | "IfNotPresent"


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecPublishConnectionDetailsToMetadata:
    r"""
    Metadata is the metadata for connection secret.

    Attributes
    ----------
    annotations : {str:str}, default is Undefined, optional
        Annotations are the annotations to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.annotations".
        - It is up to Secret Store implementation for others store types.
    labels : {str:str}, default is Undefined, optional
        Labels are the labels/tags to be added to connection secret.
        - For Kubernetes secrets, this will be used as "metadata.labels".
        - It is up to Secret Store implementation for others store types.
    $type : str, default is Undefined, optional
        Type is the SecretType for the connection secret.
        - Only valid for Kubernetes Secret Stores.
    """


    annotations?: {str:str}

    labels?: {str:str}

    $type?: str


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1SpecWriteConnectionSecretToRef:
    r"""
    WriteConnectionSecretToReference specifies the namespace and name of a
    Secret to which any connection details for this managed resource should
    be written. Connection details frequently include the endpoint, username,
    and password required to connect to the managed resource.
    This field is planned to be replaced in a future release in favor of
    PublishConnectionDetailsTo. Currently, both could be set independently
    and connection details would be published to both without affecting
    each other.

    Attributes
    ----------
    name : str, default is Undefined, required
        Name of the secret.
    namespace : str, default is Undefined, required
        Namespace of the secret.
    """


    name: str

    namespace: str


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1Status:
    r"""
    ContainerV1Status defines the observed state of ContainerV1.

    Attributes
    ----------
    atProvider : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1StatusAtProvider, default is Undefined, optional
        at provider
    conditions : [ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1StatusConditionsItems0], default is Undefined, optional
        Conditions of the resource.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration is the latest metadata.generation
        which resulted in either a ready state, or stalled due to error
        it can not recover from without human intervention.
    """


    atProvider?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1StatusAtProvider

    conditions?: [ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1StatusConditionsItems0]

    observedGeneration?: int


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1StatusAtProvider:
    r"""
    objectstorage openstack crossplane io v1alpha1 container v1 status at provider

    Attributes
    ----------
    containerRead : str, default is Undefined, optional
        Sets an access control list (ACL) that grants
        read access. This header can contain a comma-delimited list of users that can
        read the container (allows the GET method for all objects in the container).
        Changing this updates the access control list read access.
    containerSyncKey : str, default is Undefined, optional
        The secret key for container
        synchronization. Changing this updates container synchronization.
    containerSyncTo : str, default is Undefined, optional
        The destination for container
        synchronization. Changing this updates container synchronization.
    containerWrite : str, default is Undefined, optional
        Sets an ACL that grants write access. Changing
        this updates the access control list write access.
    contentType : str, default is Undefined, optional
        The MIME type for the container. Changing this
        updates the MIME type.
    forceDestroy : bool, default is Undefined, optional
        A boolean that indicates all
        objects should be deleted from the container so that the container can be
        destroyed without error. These objects are not recoverable.
    id : str, default is Undefined, optional
        id
    metadata : {str:str}, default is Undefined, optional
        Custom key/value pairs to associate with the
        container. Changing this updates the existing container metadata.
    name : str, default is Undefined, optional
        A unique name for the container. Changing this creates a
        new container.
    region : str, default is Undefined, optional
        The region in which to create the container. If
        omitted, the region argument of the provider is used. Changing this creates
        a new container.
    storageClass : str, default is Undefined, optional
        The storage class to be used for the container.
        Changing this creates a new container. This option is only available in Ceph
        RGW Swift API implementation.
    storagePolicy : str, default is Undefined, optional
        The storage policy to be used for the
        container. Changing this creates a new container.
    versioning : bool, default is Undefined, optional
        A boolean that can enable or disable object
        versioning. The default value is false. To use this feature, your Swift
        version must be 2.24 or higher (as described in the OpenStack Swift Ussuri
        release
        notes),
        and a cloud administrator must have set the allow_object_versioning = true
        configuration option in Swift. If you cannot set this versioning type, you
        may want to consider using versioning_legacy instead.
    versioningLegacy : ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1StatusAtProviderVersioningLegacy, default is Undefined, optional
        versioning legacy
    """


    containerRead?: str

    containerSyncKey?: str

    containerSyncTo?: str

    containerWrite?: str

    contentType?: str

    forceDestroy?: bool

    id?: str

    metadata?: {str:str}

    name?: str

    region?: str

    storageClass?: str

    storagePolicy?: str

    versioning?: bool

    versioningLegacy?: ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1StatusAtProviderVersioningLegacy


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1StatusAtProviderVersioningLegacy:
    r"""
    (Deprecated) Enable legacy object versioning. The
    structure is described below.

    Attributes
    ----------
    location : str, default is Undefined, optional
        Container in which versions will be stored.
    $type : str, default is Undefined, optional
        Versioning type which can be versions or history
        according to OpenStack
        documentation.
    """


    location?: str

    $type?: str


schema ObjectstorageOpenstackCrossplaneIoV1alpha1ContainerV1StatusConditionsItems0:
    r"""
    A Condition that may apply to a resource.

    Attributes
    ----------
    lastTransitionTime : str, default is Undefined, required
        LastTransitionTime is the last time this condition transitioned from one
        status to another.
    message : str, default is Undefined, optional
        A Message containing details about this condition's last transition from
        one status to another, if any.
    observedGeneration : int, default is Undefined, optional
        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
        with respect to the current state of the instance.
    reason : str, default is Undefined, required
        A Reason for this condition's last transition from one status to another.
    status : str, default is Undefined, required
        Status of this condition; is it currently True, False, or Unknown?
    $type : str, default is Undefined, required
        Type of this condition. At most one of each condition type may apply to
        a resource at any point in time.
    """


    lastTransitionTime: str

    message?: str

    observedGeneration?: int

    reason: str

    status: str

    $type: str


